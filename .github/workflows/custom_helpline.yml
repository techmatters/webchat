# This is a basic workflow to build and upload Webchat to S3 bucket with Github Actions

name: Custom Helpline Release

# Controls when the action will run.
on:
  workflow_dispatch:

  workflow_call:
    inputs:
      helpline_code:
        description: 'The short (usually 2 character) upper case code used to identify the helpline internally, e.g. ZA, IN, BR.'
        required: true
        type: string
      environment:
        description: 'Helpline Environment'
        required: true
        type: string
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Change String Case for Helpline Code
      - name: Change String Case for Helpline Code
        uses: "ASzc/change-string-case-action@v5"
        with:
          string: '${{ inputs.helpline_code }}'
      # Set SHORT_ENVIRONMENT_CODE
      - name: Production Environment
        if: inputs.environment == 'production'
        run: echo "SHORT_ENVIRONMENT_CODE=prod" >> $GITHUB_ENV
      - name: Staging Environment
        if: inputs.environment == 'staging'
        run: echo "SHORT_ENVIRONMENT_CODE=stg" >> $GITHUB_ENV
      - name: Development Environment
        if: inputs.environment == 'development'
        run: echo "SHORT_ENVIRONMENT_CODE=dev" >> $GITHUB_ENV

      # Setup credentials to access AWS for parameters
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
      # Get AWS parameters
      - name: Set GITHUB_ACTIONS_SLACK_BOT_TOKEN
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "GITHUB_ACTIONS_SLACK_BOT_TOKEN"
          env_variable_name: "GITHUB_ACTIONS_SLACK_BOT_TOKEN"
      - name: Set ASELO_DEPLOYS_CHANNEL_ID
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "ASELO_DEPLOYS_CHANNEL_ID"
          env_variable_name: "ASELO_DEPLOYS_CHANNEL_ID"
      - name: Set IP_FIND_API_KEY
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "IP_FIND_API_KEY"
          env_variable_name: "IP_FIND_API_KEY"
      - name: Set ACCOUNT_SID
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/${{ inputs.environment }}/twilio/${{ inputs.helpline_code }}/account_sid"
          env_variable_name: "ACCOUNT_SID"
      - name: Set SERVERLESS_URL
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/${{ inputs.environment }}/serverless/${{ env.ACCOUNT_SID }}/base_url"
          env_variable_name: "SERVERLESS_URL"
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      # Create and fill secret.ts
      - name: Create secret.ts
        run: |
          touch ./private/secret.ts
      - name: Fill secret.ts
        run: |
          cat <<EOT >> ./private/secret.ts
          export const API_KEY = '${{ env.IP_FIND_API_KEY }}';
          export const SERVERLESS_URL = '${{ env.SERVERLESS_URL }}';
          EOT
      # Run a single command using the runners shell to install dependencies 
      - name: Install dependencies
        run: npm install
      # Get the blockedIps for as-dev account
      - name: Get blockedIps
        if: ${{ steps.string.outputs.lowercase }}-$SHORT_ENVIRONMENT_CODE == 'as-dev'
        run: curl -o ./src/blockedIps.json https://tl-public-chat-as-dev.s3.amazonaws.com/blockedIps.json
        shell: bash
      # Get the blockedIps for jm-prod account
      - name: Get blockedIps
        if: ${{ steps.string.outputs.lowercase }}-$SHORT_ENVIRONMENT_CODE == 'jm-prod'
        run: curl -o ./src/blockedIps.json https://tl-public-chat-jm-prod.s3.amazonaws.com/blockedIps.json
        shell: bash
      # Build and compile Webchat
      - name: Run build command
        run: npm run build:${{ steps.string.outputs.lowercase }}-${{ inputs.environment }}
      # Rename the builded js file
      - name: Rename js
        run: mv bundle.js aselo-chat.min.js
        working-directory: ./build
      # Upload Webchat to S3 bucket
      - name: Upload Webchat to S3 bucket
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --exclude '*' --include '*.js' --content-type 'application/javascript; charset=utf-8'
        env:
          AWS_S3_BUCKET: tl-public-chat-${{ steps.string.outputs.lowercase }}-$SHORT_ENVIRONMENT_CODE
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'
          SOURCE_DIR: 'build'

      # Send Slack notifying success
      - name: Slack Aselo channel
        id: slack
        uses: slackapi/slack-github-action@v1.14.0
        with:
          channel-id: ${{ env.ASELO_DEPLOYS_CHANNEL_ID }}
          slack-message: "`[WEBCHAT]` Deployment to `${{inputs.helpline_code}}_${{inputs.environment}}` of ${{ github.ref_type }} `${{ github.ref_name }}` requested by `${{ github.triggering_actor }}` completed using workflow '${{ github.workflow }}' with SHA ${{ github.sha }} :rocket:."
        env:
          SLACK_BOT_TOKEN: ${{ env.GITHUB_ACTIONS_SLACK_BOT_TOKEN }}